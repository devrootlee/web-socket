name: Deploy to Main

# ✅ 브랜치 선택
on:
  push:
    branches:
      - main

# ✅ 빌드되는 서버 명시
jobs:
  build-and-push:
    runs-on: ubuntu-24.04

    steps:
      # ✅ repo checkout
      - name: Checkout Repository
        uses: actions/checkout@v3

      # ✅ JDK 17 셋팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # ✅ 프로젝트 빌드(JAR 생성)
      - name: Build Spring Boot project to JAR
        run:  chmod +x gradlew && ./gradlew clean build -x test

      # ✅ 도커 이미지 빌드(Docker image 생성)
      - name: Build Docker image
        run: |
          docker build -t websocket-app:latest .

      # ✅ 도커 이미지를 tar 파일로 저장(전송용)
      - name: Save Docker image as tar
        run: docker save websocket-app > websocket-app.tar

      # ✅ tar 파일 서버에 전송
      - name: Copy tar to Server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_KEY }}
          source: "websocket-app.tar"
          target: "~/app"
          debug: 'true'

      # ✅ docker-compose.yml 파일 업데이트
      - name: Update docker-compose.yml
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_KEY }}
          source: "docker-compose.yml"
          target: "~/app"
          debug: 'true'

      # ✅ 이미지 로드 + docker compose 로 websocket-app 만 재시작
      - name: Reload SpringBoot container via docker-compose
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_KEY }}
          script: |
            cd ~/app
            
            echo "📦 Load new image"
            sudo docker load < websocket-app.tar

            echo "🧼 Remove previous containers"
            sudo docker-compose stop server_a server_b server_c
            sudo docker-compose rm -f server_a server_b server_c

            echo "🚀 Start containers fresh"
            sudo docker-compose up -d redis 
            sleep 30
            
            sudo docker-compose up -d server_a
            sleep 30
            
            sudo docker-compose up -d server_b
            sleep 30
            
            sudo docker-compose up -d server_c

            echo "✅ Compose containers restarted"
          debug: 'true'